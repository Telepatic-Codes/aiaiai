# Cursor Rules - AIAIAI START Project

## üéØ Project Overview
This is a modern full-stack application following the Master Playbook guidelines. The project uses Next.js 14 for frontend and FastAPI for backend, with PostgreSQL as the primary database.

## üèóÔ∏è Architecture Principles

### Code Quality Standards
- **TypeScript Strict Mode**: Always use strict TypeScript configuration
- **Clean Code**: Write self-documenting code with clear naming conventions
- **SOLID Principles**: Follow SOLID design principles
- **DRY**: Don't repeat yourself - create reusable components and utilities
- **KISS**: Keep it simple, stupid - avoid over-engineering

### Security First
- **Input Validation**: Always validate and sanitize user input
- **Authentication**: Implement proper JWT-based authentication
- **Authorization**: Use role-based access control (RBAC)
- **HTTPS Only**: All communications must be encrypted
- **Secrets Management**: Never commit secrets to version control

### Performance Standards
- **Lighthouse Score**: Maintain ‚â•95 for Performance, Accessibility, Best Practices, SEO
- **Response Time**: API responses <200ms for 95% of requests
- **Bundle Size**: Keep frontend bundle under 500KB
- **Database Queries**: Optimize queries and use proper indexing
- **Caching**: Implement appropriate caching strategies

## üìÅ Project Structure

### Frontend (Next.js 14)
```
frontend/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ app/                 # App Router (Next.js 13+)
‚îÇ   ‚îú‚îÄ‚îÄ components/          # Reusable components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Base UI components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ forms/          # Form components
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ features/       # Feature-specific components
‚îÇ   ‚îú‚îÄ‚îÄ hooks/              # Custom React hooks
‚îÇ   ‚îú‚îÄ‚îÄ lib/                # Utilities and configurations
‚îÇ   ‚îú‚îÄ‚îÄ store/              # State management (Zustand)
‚îÇ   ‚îî‚îÄ‚îÄ types/              # TypeScript type definitions
```

### Backend (FastAPI)
```
backend/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ api/                # API endpoints
‚îÇ   ‚îú‚îÄ‚îÄ core/               # Core configurations
‚îÇ   ‚îú‚îÄ‚îÄ models/             # Database models
‚îÇ   ‚îú‚îÄ‚îÄ schemas/            # Pydantic schemas
‚îÇ   ‚îú‚îÄ‚îÄ services/           # Business logic
‚îÇ   ‚îî‚îÄ‚îÄ utils/              # Utilities
```

## üõ†Ô∏è Technology Stack

### Frontend
- **Framework**: Next.js 14 with App Router
- **Language**: TypeScript 5.x
- **Styling**: Tailwind CSS + shadcn/ui
- **State Management**: Zustand
- **HTTP Client**: Axios
- **Testing**: Vitest + Playwright
- **Form Handling**: React Hook Form + Zod

### Backend
- **Framework**: FastAPI
- **Language**: Python 3.11+
- **Database**: PostgreSQL 15+
- **ORM**: SQLAlchemy 2.x
- **Authentication**: Auth.js
- **Validation**: Pydantic 2.x
- **Testing**: pytest
- **Documentation**: OpenAPI/Swagger

### DevOps
- **Containerization**: Docker
- **CI/CD**: GitHub Actions
- **Monitoring**: Prometheus + Grafana
- **Logging**: ELK Stack
- **Security**: Trivy + Bandit

## üìù Coding Standards

### TypeScript/JavaScript
```typescript
// ‚úÖ Good
interface User {
  id: number;
  email: string;
  fullName: string;
  createdAt: Date;
}

const createUser = async (userData: Omit<User, 'id' | 'createdAt'>): Promise<User> => {
  // Implementation
};

// ‚ùå Bad
const createUser = async (userData: any) => {
  // Implementation
};
```

### Python
```python
# ‚úÖ Good
from typing import Optional, List
from pydantic import BaseModel, EmailStr

class UserCreate(BaseModel):
    email: EmailStr
    full_name: str
    password: str

class UserResponse(BaseModel):
    id: int
    email: str
    full_name: str
    created_at: datetime

# ‚ùå Bad
def create_user(user_data):
    # Implementation
```

### Component Structure
```typescript
// ‚úÖ Good component structure
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
  children: React.ReactNode;
  onClick?: () => void;
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  children,
  onClick
}) => {
  // Implementation with proper TypeScript types
};
```

## üîí Security Guidelines

### Frontend Security
```typescript
// ‚úÖ Secure input handling
const sanitizeInput = (input: string): string => {
  return input.replace(/[<>]/g, '');
};

// ‚úÖ Secure API calls
const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

apiClient.interceptors.request.use((config) => {
  const token = getAuthToken();
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});
```

### Backend Security
```python
# ‚úÖ Secure endpoint with proper validation
from fastapi import Depends, HTTPException, status
from app.core.security import get_current_user
from app.schemas.user import UserCreate, UserResponse

@router.post("/users/", response_model=UserResponse)
async def create_user(
    user_data: UserCreate,
    current_user: User = Depends(get_current_user)
) -> UserResponse:
    # Validate user permissions
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions"
        )
    
    # Validate input data
    if not is_valid_email(user_data.email):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid email format"
        )
    
    # Implementation
```

## üß™ Testing Standards

### Frontend Testing
```typescript
// ‚úÖ Component testing
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button Component', () => {
  it('renders with correct text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();
  });

  it('handles click events', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    fireEvent.click(screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

### Backend Testing
```python
# ‚úÖ API testing
import pytest
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_create_user():
    response = client.post(
        "/api/v1/users/",
        json={
            "email": "test@example.com",
            "password": "password123",
            "full_name": "Test User"
        }
    )
    assert response.status_code == 200
    data = response.json()
    assert data["email"] == "test@example.com"
    assert "id" in data
```

## üìä Performance Guidelines

### Frontend Performance
```typescript
// ‚úÖ Lazy loading
import { lazy, Suspense } from 'react';

const HeavyComponent = lazy(() => import('./HeavyComponent'));

export const App = () => (
  <Suspense fallback={<div>Loading...</div>}>
    <HeavyComponent />
  </Suspense>
);

// ‚úÖ Memoization
import { useMemo, useCallback } from 'react';

export const ExpensiveComponent = ({ data }) => {
  const processedData = useMemo(() => {
    return data.map(item => expensiveOperation(item));
  }, [data]);

  const handleClick = useCallback(() => {
    // Handle click
  }, []);

  return <div onClick={handleClick}>{processedData}</div>;
};
```

### Backend Performance
```python
# ‚úÖ Database optimization
from sqlalchemy.orm import selectinload
from app.models.user import User

# ‚úÖ Good - Eager loading
users = db.query(User).options(selectinload(User.posts)).all()

# ‚ùå Bad - N+1 query problem
users = db.query(User).all()
for user in users:
    posts = user.posts  # This causes additional queries

# ‚úÖ Caching
from app.core.cache import cache

@cache_result(expire=3600)
async def get_user_by_id(user_id: int) -> Optional[User]:
    return db.query(User).filter(User.id == user_id).first()
```

## üé® UI/UX Standards

### Design System
```typescript
// ‚úÖ Consistent component API
interface ButtonProps {
  variant: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';
  size: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
  children: React.ReactNode;
}

// ‚úÖ Consistent spacing
const spacing = {
  xs: '0.25rem',   // 4px
  sm: '0.5rem',    // 8px
  md: '1rem',      // 16px
  lg: '1.5rem',    // 24px
  xl: '2rem',      // 32px
} as const;
```

### Accessibility
```typescript
// ‚úÖ Accessible components
export const Button: React.FC<ButtonProps> = ({
  children,
  ...props
}) => {
  return (
    <button
      {...props}
      className="focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      aria-label={props['aria-label']}
    >
      {children}
    </button>
  );
};
```

## üîÑ Git Workflow

### Branch Naming
```
feature/user-authentication
bugfix/login-validation
hotfix/security-patch
chore/update-dependencies
docs/api-documentation
```

### Commit Messages
```
feat: add user authentication system
fix: resolve login validation issue
docs: update API documentation
refactor: improve component structure
test: add unit tests for auth service
```

## üìà Monitoring and Observability

### Frontend Monitoring
```typescript
// ‚úÖ Error tracking
import * as Sentry from '@sentry/nextjs';

export const errorHandler = (error: Error, context?: any) => {
  Sentry.captureException(error, {
    extra: context,
  });
  
  // Log to console in development
  if (process.env.NODE_ENV === 'development') {
    console.error('Error:', error, context);
  }
};

// ‚úÖ Performance monitoring
export const trackPerformance = (metric: string, value: number) => {
  analytics.track('performance_metric', {
    metric,
    value,
    timestamp: Date.now(),
  });
};
```

### Backend Monitoring
```python
# ‚úÖ Structured logging
import structlog

logger = structlog.get_logger()

def log_user_action(user_id: int, action: str, details: dict = None):
    logger.info(
        "user_action",
        user_id=user_id,
        action=action,
        details=details or {},
    )

# ‚úÖ Health checks
@router.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow(),
        "version": "1.0.0"
    }
```

## üöÄ Deployment Guidelines

### Environment Configuration
```bash
# ‚úÖ Environment variables
NEXT_PUBLIC_API_URL=https://api.example.com
DATABASE_URL=postgresql://user:password@localhost/dbname
REDIS_URL=redis://localhost:6379
JWT_SECRET_KEY=your-secret-key
```

### Docker Configuration
```dockerfile
# ‚úÖ Multi-stage build
FROM node:18-alpine AS base
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

FROM node:18-alpine AS runner
WORKDIR /app
COPY --from=base /app/node_modules ./node_modules
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```

## üìö Documentation Standards

### Code Documentation
```typescript
/**
 * Creates a new user in the system
 * @param userData - The user data to create
 * @returns Promise<User> - The created user
 * @throws {ValidationError} When user data is invalid
 * @throws {AuthenticationError} When user is not authenticated
 */
export const createUser = async (userData: UserCreate): Promise<User> => {
  // Implementation
};
```

### API Documentation
```python
@router.post(
    "/users/",
    response_model=UserResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create a new user",
    description="Creates a new user with the provided data"
)
async def create_user(
    user_data: UserCreate,
    current_user: User = Depends(get_current_user)
) -> UserResponse:
    """
    Create a new user.
    
    Args:
        user_data: User creation data
        current_user: Currently authenticated user
        
    Returns:
        UserResponse: Created user data
        
    Raises:
        HTTPException: If user data is invalid or user lacks permissions
    """
    # Implementation
```

## ‚úÖ Quality Checklist

### Before Committing
- [ ] Code follows TypeScript strict mode
- [ ] All tests pass
- [ ] No console.log statements in production code
- [ ] Proper error handling implemented
- [ ] Input validation in place
- [ ] Security best practices followed
- [ ] Performance considerations addressed
- [ ] Accessibility requirements met
- [ ] Documentation updated

### Before Deploying
- [ ] All tests pass in CI/CD
- [ ] Security scan completed
- [ ] Performance benchmarks met
- [ ] Database migrations tested
- [ ] Environment variables configured
- [ ] Monitoring and alerting active
- [ ] Backup strategy verified
- [ ] Rollback plan prepared

## üéØ Success Metrics

### Code Quality
- **Test Coverage**: ‚â•90%
- **TypeScript Coverage**: 100%
- **Linting Errors**: 0
- **Security Vulnerabilities**: 0

### Performance
- **Lighthouse Score**: ‚â•95
- **API Response Time**: <200ms
- **Bundle Size**: <500KB
- **Time to Interactive**: <3s

### User Experience
- **Accessibility Score**: WCAG 2.1 AA
- **Mobile Responsiveness**: 100%
- **Cross-browser Compatibility**: Modern browsers
- **Error Rate**: <0.1%

Remember: Quality over quantity. Every line of code should add value and be maintainable for the long term. 